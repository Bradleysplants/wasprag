// src/client/pages/auth/SignupPage.jsx

import React, { useState } from 'react';
import { Link } from 'wasp/client/router';
// Import Wasp's specific signup function and the useAction hook
import { signup } from 'wasp/client/auth';
import { useAction } from 'wasp/client/operations';
// Import the specific action hook generated by Wasp
import { sendWelcomeEmail } from 'wasp/client/operations';

// Assuming Wasp automatically handles the layout wrapping
export const SignupPage = () => {
  // State for form fields
  const [username, setUsername] = useState(''); // Or email if using email for login
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Hook into the sendWelcomeEmail action
  const sendWelcomeEmailAction = useAction(sendWelcomeEmail, {
    // Optional: Handle specific outcomes of the email action
    onSuccess: (data) => {
      console.log("Welcome email sent successfully!", data?.messageId);
      // No need for user-facing message here usually, signup success is implicit
    },
    onError: (error) => {
      // Log email errors, but don't block the user flow if signup worked
      console.error("Failed to send welcome email:", error);
    }
  });

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null); // Clear previous errors
    setIsLoading(true);

    // Basic validation
    if (!username || !password) {
      setError("Please provide both username/email and password.");
      setIsLoading(false);
      return;
    }
    // Add more validation as needed (email format, password length)
    if (password.length < 8) {
        setError("Password must be at least 8 characters long.");
        setIsLoading(false);
        return;
    }

    try {
      // --- Step 1: Call Wasp's signup function ---
      await signup({
        username: username, // Pass username (or email if using that)
        password: password,
        // If your User entity has an 'email' field distinct from 'username',
        // you might need a custom backend signup action to handle saving both.
        // The default usernameAndPassword likely only saves username/password hash.
        // Assuming for now 'username' IS the email or the primary identifier.
      });

      // --- Step 2: If signup succeeded, call the welcome email action ---
      // Use the identifier the user signed up with as the recipient email.
      try {
        await sendWelcomeEmailAction({
          toEmail: username, // Send to the username/email used for signup
          userName: username // Optional: personalize with username
        });
      } catch (emailError) {
        // Error is handled by the onError callback in useAction, but catch here
        // prevents it from stopping the signup success flow if needed.
        console.warn("Welcome email dispatch failed, but signup succeeded.");
      }

      // Signup successful! Wasp's `onAuthSucceededRedirectTo` in main.wasp
      // should handle redirecting the user (usually to "/") automatically.
      // No explicit redirect needed here usually.

    } catch (err) {
      // Handle errors from the signup() function itself
      console.error("Signup Error:", err);
      setError(err?.message || 'Failed to create account. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    // --- Centering Container with Tailwind (Keep as before) ---
    <div className="flex flex-col flex-grow items-center justify-center px-4 py-12 sm:px-6 lg:px-8 bg-gradient-to-br from-plant-subtle via-neutral-light to-white">
      {/* --- Signup Card Styling (Keep as before) --- */}
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg">
        {/* Header (Keep as before) */}
        <div className="text-center">
           <span className="text-4xl mb-4 inline-block text-plant-primary" role="img" aria-label="Leaf sprout emoji">ðŸŒ¿</span>
          <h2 className="text-2xl font-bold text-neutral-dark font-display">
            Create Your Account
          </h2>
          <p className="mt-2 text-sm text-neutral-medium">
            Join Botanical Assistant to get plant advice!
          </p>
        </div>

        {/* --- CUSTOM SIGNUP FORM --- */}
        <form onSubmit={handleSubmit} className="space-y-4">
           {/* Identifier Input (Username or Email) */}
           <div>
            <label htmlFor="username" className="block text-sm font-medium text-neutral-dark mb-1">
              Email (or Username)
            </label>
            <input
              id="username"
              name="username"
              type="text" // Use "email" if you expect email format
              autoComplete="username" // Or "email"
              required
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              disabled={isLoading}
              className="w-full px-4 py-2.5 border border-neutral-medium/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-sun focus:border-transparent text-neutral-dark placeholder-neutral-medium text-sm shadow-sm disabled:opacity-60"
              placeholder="you@example.com"
            />
          </div>

          {/* Password Input */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-neutral-dark mb-1">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="new-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
               className="w-full px-4 py-2.5 border border-neutral-medium/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-sun focus:border-transparent text-neutral-dark placeholder-neutral-medium text-sm shadow-sm disabled:opacity-60"
              placeholder="Choose a password (min. 8 characters)"
            />
          </div>

          {/* Error Message Display */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-300 rounded-lg" role="alert">
              {error}
            </div>
          )}

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-plant-primary hover:bg-plant-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-plant-primary-dark transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                  <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin" role="status"></div>
              ) : (
                  'Sign Up'
              )}
            </button>
          </div>
        </form>
        {/* --- END CUSTOM SIGNUP FORM --- */}


        {/* Login Link Section (Keep as before) */}
        <div className="mt-6 text-center text-sm">
          <p className="text-neutral-medium">
            {'Already have an account? '}
            <Link
              to="/login"
              className="font-medium text-plant-primary-dark hover:text-plant-primary hover:underline"
            >
              Log in
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default SignupPage;